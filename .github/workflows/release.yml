name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          pip install pipx
          pipx install poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Dependencies
        run: poetry install

      - name: Build Project
        run: poetry build

      - name: Package Application
        run: |
          mkdir dist_release
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp dist/*.whl dist_release/
          else
            cp dist/*.tar.gz dist_release/
          fi
        shell: bash

      - name: Install PyInstaller
        run: |
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --add-data "sumeyyes_amazing_word_game/db/words.db:data/words.db" --add-data "sumeyyes_amazing_word_game/db/players.db:data/players.db" sumeyyes_amazing_word_game/__main__.py
        shell: bash

      - name: Package PyInstaller Build
        run: |
          mkdir dist_release_pyinstaller
          cp dist/* dist_release_pyinstaller/
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build-${{ github.run_id }}
          path: dist_release/*

      - name: Upload PyInstaller Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-build-${{ matrix.os }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: dist_release_pyinstaller/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_release

      - name: Download PyInstaller Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist_release_pyinstaller

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        run: |
          release_id=$(gh api -X GET "repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | jq -r '.id')
          asset_id=$(gh api -X GET "repos/${{ github.repository }}/releases/${release_id}/assets" | jq -r '.[] | select(.name == "your-asset-name") | .id')
          if [ -z "$asset_id" ]; then
            echo "Asset not found, creating a new one"
            gh release upload ${{ github.ref_name }} path/to/your-asset --clobber
          else
            echo "Asset found, updating existing one"
            gh api -X PATCH "/repos/${{ github.repository }}/releases/assets/$asset_id" -F name="your-asset-name" -F label="Updated Asset" -F file=@path/to/your-asset
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
